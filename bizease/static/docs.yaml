openapi: 3.0.4
info:
  title: Bizease backend Web Api docs - OpenAPI 3.0
  description: |
    BizEase is a web app that helps businesses manage and optimize their sales processes, 
    from inventory management to order management. It includes features like order tracking, 
    pipeline management, reporting, and analytics. It aims to streamline sales activities, 
    improve team collaboration, and ultimately boost sales performance
    
    ## Authentication
    Some of the API endpoints can only be used by authorized users. Such endpoints require http
    bearer authentication. To create/get an API token, the user must login or signup using the 
    appropriate endpoints, An 'access' and a 'refresh' token will be returned in the response body.
    When an authenticated request is to be made, The API token is then included in the Authorization 
    header of the HTTP request, formatted as `Authorization: Bearer <token>`.
  contact:
    email: egbebitimi121@gmail.com
  version: 1.0.0
servers:
  - url: https://adedamola.pythonanywhere.com/v1/
tags:
  - name: Auth
    description: Authorization and Authentication
  - name: User Profile
    description: Creating, Accessing and modifying a User's Profile
  - name: User Inventory
    description: Creating, Accessing and modifying a User's Inventory
  - name: User Orders
    description: Creating, Accessing and modifying Orders created for a Users product
  - name: User Dashboard
    description: Accessing data related to a User's dashboard

paths:
  /accounts/:
    get:
      security:
        - bearerAuth: []
      tags:
        - User Profile
      summary: Get a User's details
      description: 
        Gets the details of an Authenticated User from the Server
      responses:
        '200':
          description: User data retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '401':
          description: Unauthenticated Request. Invalid or absent jwt
          $ref: "#/components/errors/Error401"
        '500':
          description: Unexpected Server error
          $ref: "#/components/errors/Server500"
    put:
      security:
        - bearerAuth: []
      tags:
        - User Profile
      summary: Update a User's details
      description: 
        Updates one or more details of an existing authenticated user. Essentially 
        all of a User's details can be changed except for password. The User details
        to be updated is identified via the jwt Bearer token.
      requestBody:
        description: 
          Updates a user's data with a key-value pair object, where each key 
          is a user detail and it's corresponding value is the new updated value
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: User data updated successfully
        '400':
          description: 
            Invalid Request Body. Response Body is a json object containing a 'detail' 
            field that maps each invalid field name to an array of errors on why the field is invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: object
                    additionalproperties:
                      type: array
                      items:
                        type: string
                    example:
                      full_name:
                        - This field may not be blank
        '500':
          description: Unexpected Server error while trying to update a User's details
          $ref: "#/components/errors/Server500"
    delete:
      security:
        - bearerAuth: []
      tags:
        - User Profile
      summary: Delete a User's data
      description: 
        Deletes all of a User's data including inventory and orders data that's stored 
        on the server.The User data to be deleted is identified via the jwt Bearer token.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: User data deleted successfully
        '500':
          description: Unexpected Server error while trying to delete a User's data
          $ref: "#/components/errors/Server500"

  /accounts/signup/:
    post:
      tags:
        - Auth
      summary: Register a new User on the server.
      description: 
        Validates the body of the request and creates a new user in the database. An email verification 
        link is then sent to the email of the new user if the email actually exists. Without this 
        verification step, the user would be unable to login using the credentials of the newly
        created account.
      requestBody:
        description: Create a new user in the database with the validated request body and send a verification email
        content:
          application/json:
            schema:
              required:
                - business_name
                - full_name
                - email
                - password
                - business_type
              type: object
              properties:
                business_name:
                  type: string
                full_name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                country:
                  type: string
                currency:
                  type: string # change to an enum
                state:
                  type: string
                business_type:
                  type: string
      responses:
        '201':
          description: New unverified User account has been created
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: User account created. Email verification has been sent
        '400':
          description: 
            Invalid Request Body. Response Body is a json object containing a 'detail' field that maps 
            each invalid field name to an array of errors on why the field is invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: object
                    additionalproperties:
                      type: array
                      items:
                        type: string
                    example:
                      business_name:
                        - This field is required
                      email:
                        - custom user with this Email Address already exists.
        '500':
          description: Unexpected server error while trying to create the new user
          $ref: "#/components/errors/Server500"

  /accounts/verify-email/:
    post:
      tags:
        - Auth
      summary: Verify a User's email using a otp
      description: 
        Verify the user's email using a valid 6-character otp string
      requestBody:
        description: email and otp that will be used during verification
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                otp:
                  type: string
        required: true
      responses:
        '200':
          description: User email verified.
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: User email verified.
        '400':
          description: Invalid verification token
          content:
            oneOf:
              - application/json:
                schema:
                  type: object
                  properties:
                    detail:
                      type: string
                      example: Invalid or expired token
              - application/json:
                schema:
                  type: object
                  properties:
                    detail:
                      type: string
                      example: Invalid link
        '500':
          description: Unexpected Server error
          $ref: "#/components/errors/Server500"
    
  /accounts/login/:
    post:
      tags:
        - Auth
      summary: Logs in an existing User on the server.
      description: 
        Logs in a User using the email and password fields in the request body. The email and password
        must belong to an existing user. The email must have also been verified. The http json response 
        body also contains a refresh and access jwt token used to maintain the newly logged-in User's session
      requestBody:
        description: A User's correct email and password
        content:
          application/json:
            schema:
              required:
                - email
                - password
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Login successful
                  data:
                    type: object
                    properties:
                      access:
                        type: string
                        description: 
                          The token used to access resources using http Bearer Auth. Expires 1 hour after creation
                        example: 
                          eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
                          .eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0
                          .KMUFsIDTnFmyG3nMiGM6H9FNFUROf3wh7SmqJp-QV30"
                      refresh:
                        description: 
                          Used to get new access tokens. Expires 7 days after creation
                        type: string
                        example: 
                          eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
                          .eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0
                          .KMUFsIDTnFmyG3nMiGM6H9FNFUROf3wh7SmqJp-QV30"
        '400':
          description: 
            Invalid Request Body. Response Body is a json object containing a 'detail' field that maps 
            each invalid field name to an array of errors on why the field is invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: object
                    additionalproperties:
                      type: array
                      items:
                        type: string
                    example:
                      email:
                        - This field is required
                      password:
                        - This field is required
        '401':
          description: 
            Invalid credentials or unverified account
          content:
            application/json:
              schema:
                type: object  
                properties:
                  detail:
                    type: string
                    enum:
                      - Invalid credentials!
                      - Unverified account! Please verify your account.
        '500':
          description: Unexpected Server Error while trying to log the user in
          $ref: "#/components/errors/Server500"

  /accounts/verification-request/:
    post:
      tags:
        - Auth
      summary: Manually request for an email verification link.
      description: 
        Sends a new email verification link to a specified email invalidating all other 
        links sent to the same email.
      requestBody:
        description: email to send the verification link
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
        required: true
      responses:
        '200':
          description: 
            Email verification has been sent. Note that apart from a server error causing a '500'
            status code, the server would always return this response whether an email was actually sent or not.
            This is for security purposes.
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Email verification has been sent if the email is registered

        '500':
          description: Unexpected Server Error while trying to send the email
          $ref: "#/components/errors/Server500"

  /accounts/password-reset/:
    post:
      tags:
        - Auth
      summary: Send a password reset otp to a user's email
      description: 
        Send a password reset otp to a verified user's email address
      requestBody:
        description: Veriried user email that the otp would be sent to
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
        required: true
      responses:
        '200':
          description: 
            If the email is valid, a password reset otp has been sent. Do note that apart from a server error causing a '500'
            status code, the server would always return this response whether an otp was actually sent or not.
            This is for security purposes.
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: If the email is valid, a password reset otp has been sent.

        '500':
          description: Unexpected Server Error while trying to send the otp
          $ref: "#/components/errors/Server500"

  /accounts/password-reset-confirm/:
    post:
      tags:
        - Auth
      summary: Change a user password using a valid otp
      description: 
        Change a user's password using a valid otp that was previously
        received from the server
      requestBody:
        description: The new password and he otp for validting the request
        content:
          application/json:
            schema:
              type: object
              properties:
                otp:
                  type: string
                password:
                  type: string
        required: true
      responses:
        '200':
          description: Password has been reset.
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Password has been reset.

        '500':
          description: Unexpected Server Error while trying to send the email
          $ref: "#/components/errors/Server500"

  /accounts/google-login/:
    post:
      tags:
        - Auth
      summary: Sign user in using google
      description: 
        Sign a user in using their google credetials. New emails and others credentials
        posted to this endpoint won't be verified.
      requestBody:
        description: Google account credetials
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                name:
                  type: string
        required: true
      responses:
        '200':
          description: Password has been reset.
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Login successful
                  data:
                    type: object
                    properties:
                      access:
                        type: string
                        example: 
                          eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
                          .eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0
                          .KMUFsIDTnFmyG3nMiGM6H9FNFUROf3wh7SmqJp-QV30"
                      refresh:
                        type: string
                        example: 
                          eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
                          .eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0
                          .KMUFsIDTnFmyG3nMiGM6H9FNFUROf3wh7SmqJp-QV30"
        '400':
          description: Invalid email or name field
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Invalid email or name field

        '500':
          description: Unexpected Server Error while trying to send the email
          $ref: "#/components/errors/Server500"

  /token/refresh/:
    post:
      tags:
        - Auth
      summary: Get a new access token
      description:
        Gets a new access token using a valid refresh token.
      requestBody:
        description: The refresh token that will be used to retrieve a new access token
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh:
                  type: string
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      access:
                        type: string
                        example: 
                          eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
                          .eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0
                          .KMUFsIDTnFmyG3nMiGM6H9FNFUROf3wh7SmqJp-QV30"
        '400':
          description: Invalid Request body
          content:
            application/json:
              schema:
                type: object
                properties:
                  refresh:
                    type: array
                    items:
                      type: string
                      example:  This field is required
        '500':
          description: unexpected server error while trying to refresh the token
          $ref: "#/components/errors/Server500"

  /dashboard-data/:
    get:
      security:
        - bearerAuth: []
      tags:
        - User Dashboard
      summary: Get data to be displayed on the User's dashboard
      description: 
        Gets data related to the overview of a User's business. The data returned by this 
        endpoint is most likely to be displayed on the User's dashboard
      responses:
        '200':
          description: data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  business_name:
                    type: string
                  currency:
                    type: string
                  language:
                    type: string
                  top_Selling_product:
                    description: name of the product with the most orders
                    type: string
                  revenue:
                    description: sum of the total price of all the orders for any of a User's products
                    type: integer
                  pending_orders:
                    type: array
                    items:
                      $ref: "#/components/schemas/Order"
                  low_stock_items:
                    type: array
                    items:
                      $ref: "#/components/schemas/InventoryItem"
        '401':
          description: Unauthenticated Request. Invalid or absent jwt
          $ref: "#/components/errors/Error401"
        '500':
          description: unexpected server error
          $ref: "#/components/errors/Server500"


  /orders/:
    get:
      security:
        - bearerAuth: []
      tags:
        - User Orders
      summary: Get the Orders that have been made for a User's products
      description: 
        Gets all the Orders that have been made for an authenticated User's product.
      parameters:
        - name: page
          in: query
          description: 
            The page number whose orders data is to be retrieved. This allows a client 
            to get the data in a paginated format.
          schema:
            type: integer
            minimum: 1
        - name: order
          in: query
          description: 
            The order in which the orders data should be retrieved as well as the order
            attribute to use for comparison when ordering the data. The default ordering
            is ascending. Values prefixed by '-' means the data would be ordered in descending order. 
            Invalid values will be ignored.
          schema:
            type: string
            enum:
              - id
              - -id
              - order_date
              - -order_date
              - -total_price 
              - total_price
        - name: status
          in: query
          description: 
            Allows the retrieval of only orders with a specific status. The values are case-insensitive 
            and invalid values will be ignored
          schema:
            type: string
            enum:
              - Pending
              - Delivered
      responses:
        '200':
          description: User orders have been retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      page_count:
                        type: integer
                        description:
                          The total number of pages the data is split into. Defaults to '1'
                          if the 'page' query parameter is not included in the endpoint
                        example: 1
                      next_page:
                        type: integer
                        minimum: 2
                        description:
                          The number of the next page of data. defaults to null if this response
                          is the last page or the 'page' query parameter is not included in the endpoint
                        nullable: true
                        example: 2
                      prev_page:
                        type: integer
                        description:
                          The number of the previous page of data. defaults to null if this response
                          is the first page or the 'page' query parameter is not included in the endpoint
                        nullable: true
                        example: 1
                      length:
                        type: integer
                        description: The length of the 'orders' array that's also part of the response body
                        exmple: 20
                      orders:
                        description: An array of Orders for a User's product
                        type: array
                        items:
                          $ref: "#/components/schemas/Order"
        '401':
          description: Unauthenticated Request. Invalid or absent jwt
          $ref: "#/components/errors/Error401"
        '404':
          description: 
            No page was found for the value of the 'page' query parameter.
            The parameter is formatted improperly or out of bounds
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Page Not found

        '500':
          description: Unexpected server error
          $ref: "#/components/errors/Server500"
        
    post:
      security:
        - bearerAuth: []
      tags:
        - User Orders
      summary: Create new Order
      description: 
        Create new orders for an authenticated User's product. The ordered product must exist 
        in the inventory and the ordered product's quantity must not be greater than the corresponding
        inventory's product stock_level
      requestBody:
        content:
          application/json:
            schema:
              required:
                - client_name
              $ref: "#/components/schemas/Order"
        required: true
      responses:
        '200':
          description: New Order has been created and saved
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Order created successfully
        '400':
          description: 
            Invalid Request Body. Response Body is a json object containing a 'detail' field that maps 
            each invalid field name to an array of errors on why the field is invalid
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      detail:
                        type: object
                        additionalproperties:
                          type: array
                          items:
                            type: string
                        example:
                          client_name:
                            - This field is required
                          ordered_products:
                            - This field is required
                  - type: array
                    items:
                      type: string
                      example: Order must contain at least one Ordered product
        '401':
          description: Unauthenticated Request. Invalid or absent jwt
          $ref: "#/components/errors/Error401"
        '500':
          description: Unexpected server error
          $ref: "#/components/errors/Server500"
    
  /orders/{order_id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - User Orders
      summary: Get a single Order for a User's product
      description: 
        Gets a single Order for a User's product by the order's id. The request
        must be made by the authenticated User.
      parameters:
        - name: order_id
          in: path
          description: The id of the order to be retrieved
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        '401':
          description: Unauthenticated Request. Invalid or absent jwt
          $ref: "#/components/errors/Error401"
        '500':
          description: Unexpected server error
          $ref: "#/components/errors/Server500"
        
    put:
      security:
        - bearerAuth: []
      tags:
        - User Orders
      summary: Edit a User's product order
      description: 
        Edit a User's product order. Only Orders with a status of 'Pending' can be updated. 
        Only 'client_name', 'client_email', 'client_phone' and 'status' fields can be updated.
        Updating an Order's 'status' field to "Delivered" will also update the 'delivery_date' field
      parameters:
        - name: order_id
          in: path
          description: The id of the order to be updated
          required: true
          schema:
            type: integer
      requestBody:
        description:
          All fields are optional but only any of 'client_name', 'client_email', 'client_phone' and 'status' 
          fields that's to be updated can be in the request body, Any other field will be ignored. Since all
          fields are optional, an empty request body is also disallowed
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                client_name:
                  type: string
                client_email:
                  type: string
                client_phone:
                  type: string
                status:
                  type: string
      responses:
        '200':
          description: The Order has been updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Order Updated successfully
        '401':
          description: Unauthenticated Request. Invalid or absent jwt
          $ref: "#/components/errors/Error401"
        '500':
          description: Unexpected server error
          $ref: "#/components/errors/Server500"

    delete:
      security:
        - bearerAuth: []
      tags:
        - User Orders
      summary: Deletes an Order for a User's product
      description: 
        Deletes an Order for a user's products through the order id
      parameters:
        - name: order_id
          in: path
          description: The id of the order to be deleted
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Order deleted successfully
        '401':
          description: Unauthenticated Request. Invalid or absent jwt
          $ref: "#/components/errors/Error401"
        '500':
          description: Unexpected server error
          $ref: "#/components/errors/Server500"

  /orders/{order_id}/ordered-products:
    post:
      security:
        - bearerAuth: []
      tags:
        - User Orders
      summary: Add a new ordered product to an existing order
      description: 
        Adds a new ordered product to an existing order. The 'total_price' field of the existing order
        will be updated with the price of the newly added product
      parameters:
        - name: order_id
          in: path
          description: The id of the order to add a new ordered product
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Product added to Order successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: product added to Order successfully
        '400':
          description: 
            Invalid Request Body. Response Body is a json object containing a 'detail' 
            field that maps each invalid field name to an array of errors on why the field is invalid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: object
                    additionalproperties:
                      type: array
                      items:
                        type: string
                    example:
                      product_name:
                        - This field is required
                      ordered_products:
                        - This field is required
        '401':
          description: Unauthenticated Request. Invalid or absent jwt
          $ref: "#/components/errors/Error401"
        '500':
          description: Unexpected server error
          $ref: "#/components/errors/Server500"

  /orders/{order_id}/ordered-products/{product_id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - User Orders
      summary: Get the data of a single ordered product
      description: 
        Get the data of a single ordered product using it's id and it's Order id
      parameters:
        - name: order_id
          in: path
          description: The id of the order that one of it's ordered products is to be retrieved
          required: true
          schema:
            type: integer
        - name: product_id
          in: path
          description: The id of the ordered product to be retrieved
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The Ordered product data
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#components/schemas/OrderedProduct"
        '404':
          description:
            The Order or Ordered product with their respective ids was not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    enum:
                      - Order not found
                      - Ordered Product not found
        '401':
          description: Unauthenticated Request. Invalid or absent jwt
          $ref: "#/components/errors/Error401"
        '500':
          description: Unexpected server error
          $ref: "#/components/errors/Server500"

    put:
      security:
        - bearerAuth: []
      tags:
        - User Orders
      summary: Update an Ordered product's quantity
      description: 
        Updates an Ordered product fields. Only the quantity field is allowed to be updated
      parameters:
        - name: order_id
          in: path
          description: The id of the order that one of it's ordered products is to be updated
          required: true
          schema:
            type: integer
        - name: product_id
          in: path
          description: The id of the ordered product to be updated
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The updated Ordered product data
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#components/schemas/OrderedProduct"
        '400':
          description: 
            Invalid Request Body. Response Body is a json object containing a 'detail' field that maps 
            each invalid field name to an array of errors on why the field is invalid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: object
                    additionalproperties:
                      type: array
                      items:
                        type: string
                    example:
                      quantity:
                        - Quantity must be an integer and must be equal to 1 at least
        '404':
          description:
            The order or Ordered product with their respective id was not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    enum:
                      - Order not found
                      - Ordered Product not found
        '401':
          description: Unauthenticated Request. Invalid or absent jwt
          $ref: "#/components/errors/Error401"
        '500':
          description: Unexpected server error
          $ref: "#/components/errors/Server500"

    delete:
      security:
        - bearerAuth: []
      tags:
        - User Orders
      summary: Delete an Ordered product from an Order
      description: 
        Deletes an Ordered product from an Order provided the Order is pending, the deleted item is not 
        the only ordered product of the order and the order exists. The Order's total_price attribute will 
        also be updated once the ordered product is deleted.
      parameters:
        - name: order_id
          in: path
          description: The id of the order that one of it's ordered products is to be retrieved
          required: true
          schema:
            type: integer
        - name: product_id
          in: path
          description: The id of the ordered product to be retrieved
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Ordered product deleted successfully
        '400':
          description:
            The ordered product requested to be deleted is either the only ordered product of the order or
            the order is a 'Delivered' order
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    enum:
                      - Only the Ordered products of Pending Orders can be deleted
                      - The only ordered product of an order can't be deleted. An Order must have at least one ordered product
        '404':
          description:
            The order or Ordered product with their respective id was not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    enum:
                      - Order not found
                      - Ordered Product not found
        '401':
          description: Unauthenticated Request. Invalid or absent jwt
          $ref: "#/components/errors/Error401"
        '500':
          description: Unexpected server error
          $ref: "#/components/errors/Server500"

  /orders/stats:
    get:
      security:
        - bearerAuth: []
      tags:
        - User Orders
      summary: Get statistics about Orders made for a User's products
      description: 
        Gets Total Orders, Total Revenue and Pending Orders of a User's products
      responses:
        '200':
          description: Data Retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_orders:
                    type: integer
                    example: 479
                  total_revenue:
                    type: integer
                    example: 4790000
                  pending_orders:
                    type: integer
                    example: 150
        '401':
          description: Unauthenticated Request. Invalid or absent jwt
          $ref: "#/components/errors/Error401"
        '500':
          description: Unexpected server error
          $ref: "#/components/errors/Server500"

  /inventory/:
    get:
      security:
        - bearerAuth: []
      tags:
        - User Inventory
      summary: Get the product in a User's Inventory
      description: 
        Retrieves Products in an authenticated User's Inventory
      parameters:
        - name: page
          in: query
          description: 
            The page number whose orders data is to be retrieved. This allows a client 
            to get the data in a paginated format.
          schema:
            type: integer
            minimum: 1
        - name: order
          in: query
          description: 
            The order in which the inventory data should be retrieved as well as the 
            attribute to use for comparison when ordering the data. The default ordering
            is ascending. Values prefixed by '-' means the data would be ordered in descending order. 
            Invalid values will be ignored.
          schema:
            type: string
            enum:
              - id
              - -id
              - last_updated
              - -last_updated
              - -price 
              - price
        - name: low_stock
          in: query
          description: 
            Returns only Inventory items with low stock. It doesn't require a value.
          schema:
            type: string
        - name: query
          in: query
          description: 
            Returns only Inventory items that best fit the value. It can be used to search
            through the inventory using a string
          schema:
            type: string
      responses:
        '200':
          description: Inventory products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      page_count:
                        type: integer
                        description:
                          The total number of pages the data is split into. Defaults to '1'
                          if the 'page' query parameter is not included in the endpoint
                        example: 1
                      next_page:
                        type: integer
                        minimum: 2
                        description:
                          The number of the next page of data. defaults to null if this response
                          is the last page or the 'page' query parameter is not included in the endpoint
                        nullable: true
                        example: 2
                      prev_page:
                        type: integer
                        description:
                          The number of the previous page of data. defaults to null if this response
                          is the first page or the 'page' query parameter is not included in the endpoint
                        nullable: true
                        example: 1
                      length:
                        type: integer
                        description: The length of the 'products' array that's also part of the response body
                        exmple: 20
                      products:
                        description: An array products in a User's Inventory
                        type: array
                        items:
                          $ref: "#/components/schemas/InventoryItem"
        '404':
          description: 
            No page was found for the value of the 'page' query parameter.
            The parameter is formatted improperly or out of bounds
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail: 
                    type: string
                    example: Page Not found
        '401':
          description: Unauthenticated Request. Invalid or absent jwt
          $ref: "#/components/errors/Error401"
        '500':
          description: Unexpected server error
          $ref: "#/components/errors/Server500"
       
    post:
      security:
        - bearerAuth: []
      tags:
        - User Inventory
      summary: Add a new product to a User's Inventory
      description: 
        Add a new product to a User's Inventory. The User must be authenticated and a 
        product name can't be shared among different products in the inventory. The 
        inventory item's name must be unique
      requestBody:
        content:
          application/json:
            schema:
              required:
                - product_name
                - stock_level
                - price
              type: array
              items:
                $ref: "#/components/schemas/InventoryItem"
        required: true
      responses:
        '200':
          description: New Item(s) have been added to a User's Inventory
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: New Item(s) added to inventory
        '400':
          description: 
            Invalid Request Body. In this case, Response Body is a json object containing a 'detail' 
            field that maps each invalid field name to an array of errors on why the field is invalid. 
            It could also be an Integrity Error where the new product's name already exist in the inventory
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      detail:
                        type: object
                        additionalproperties:
                          type: array
                          items:
                            type: string
                        example:
                          product_name:
                            - This field is required
                          ordered_products:
                            - This field is required
                  - type: object
                    properties:
                      detail:
                        type: string
                        example: Multiple inventory items with the same 'product_name' are not allowed
        '401':
          description: Unauthenticated Request. Invalid or absent jwt
          $ref: "#/components/errors/Error401"
        '500':
          description: Unexpected server error
          $ref: "#/components/errors/Server500"

  /inventory/{item_id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - User Inventory
      summary: Get a single Item from a User's inventory
      description: 
        Gets a single Item from a User's inventory using the items's id. The request
        must be made by the authenticated User.
      parameters:
        - name: item_id
          in: path
          description: The id of the Inventory item to be retrieved
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryItem"
        '404':
          description: 
            Inventory Item with the specified id not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Item not found
        '401':
          description: Unauthenticated Request. Invalid or absent jwt
          $ref: "#/components/errors/Error401"
        '500':
          description: Unexpected server error
          $ref: "#/components/errors/Server500"
        
    put:
      security:
        - bearerAuth: []
      tags:
        - User Inventory
      summary: Edit a User's Inventory item details
      description: 
        Edit a User's Inventory item details using the item's id
      parameters:
        - name: item_id
          in: path
          description: The id of the Inventory item to be edited
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InventoryItem"
        required: true
      responses:
        '200':
          description: The Inventory item has been updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Inventory item Updated successfully
        '404':
          description: 
            Inventory Item with the specified id not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Item not found
        '400':
          description: 
            Updated Inventory item has the same name as an existing inventory item. This is not allowed
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Multiple inventory items with the same 'product_name' are not allowed
        '401':
          description: Unauthenticated Request. Invalid or absent jwt
          $ref: "#/components/errors/Error401"
        '500':
          description: Unexpected server error
          $ref: "#/components/errors/Server500"
    delete:
      security:
        - bearerAuth: []
      tags:
        - User Inventory
      summary: Delete a User's Inventory item
      description: 
       Deletes a User's Inventory item using the items's id
      parameters:
        - name: item_id
          in: path
          description: The id of the Inventory item to be deleted
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Inventory item deleted successfully
        '401':
          description: Unauthenticated Request. Invalid or absent jwt
          $ref: "#/components/errors/Error401"
        '500':
          description: Unexpected server error
          $ref: "#/components/errors/Server500"

  /inventory/stats:
    get:
      security:
        - bearerAuth: []
      tags:
        - User Inventory
      summary: Get statistics about item's in a User's inventory
      description: 
        Gets Total Orders, Total Revenue and Pending Orders of a User's products
      responses:
        '200':
          description: Data Retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_stock_value:
                    type: integer
                    example: 479
                  low_stock_count:
                    type: integer
                    example: 4790000
                  total_products:
                    type: integer
                    example: 150
        '401':
          description: Unauthenticated Request. Invalid or absent jwt
          $ref: "#/components/errors/Error401"
        '500':
          description: Unexpected server error
          $ref: "#/components/errors/Server500"

  /reports/:
    get:
      security:
        - bearerAuth: []
      tags:
        - User Business Report
      summary: Get User's business report data
      description: 
        Get general report data about the inventory and orders of a User's business over a period of time. Takes
        optional query parameters that specifies the time period. defaults to all time if the parameter isn't included
      parameters:
        - name: period
          in: query
          description: 
            The time period in which the business report data is to be generated from
          schema:
            type: string
            enum:
              - last-week
              - last-month
              - last-6-months
              - last-year
        - name: start_date
          in: query
          description: 
            The start date of the time period in which the business report data is to be generated from. If this
            parameter is present, 'end_date' parameter must also be present and 'period' parameter must be absent.
            It's a string representing a date in the format 'YYYY-MM-DD'.
          schema:
            type: string
            example: "2025-07-16"
        - name: end_date
          in: query
          description: 
            The end date of the time period in which the business report data is to be generated from. If this
            parameter is present, 'start_date' parameter must also be present and 'period' parameter must be absent.
            It's a string representing a date in the format 'YYYY-MM-DD'.
          schema:
            type: string
            example: "2025-07-26"
      responses:
        '200':
          description: The reports data have been retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      period:
                        type: string
                        description: The time range in which the report data was filtered over
                        example: All time
                      top_selling_product:
                        type: string
                        description:
                          The name of the product with the highest quantity ordered during the specified period. 
                          It doesn't matter if it's a pending order or a delivered order
                      low_stock_items:
                        type: integer
                        description:
                          The number of inventory items that were present during the specified time period and their
                          stock level is currently less than their low stock threshold
                      pending_orders:
                        type: integer
                        description:
                          The number of currently pending orders for any of a user's product provided the order was created 
                          during the specified time period
                      total_products:
                        type: integer
                        description: The total number of products in a User's inventory during the specified time period
                      total_stock_value:
                        description: 
                          The total price of all the items that had been added to a user's inventory during the specified period
                      total_revenue:
                        type: integer
                        description: 
                          The total price of all the orders for any of a user's product provided the order was created 
                          during the specified time period
                      date_revenue_chart_data:
                        type: array
                        description: 
                          An array of objects whose attributes are a date and the revenue made on that date provided the date
                          is in the specified time period/range 
                        items:
                          type: object
                          properties:
                            date:
                              type: string
                              description: A date in the 'YYYY-MM-DD' format
                            revenue:
                              type: integer
                              description: The total price of all orders made for any of a user's product on that date
                      product_sales_chart_data:
                        type: array
                        description: 
                          An array of objects whose attributes are a product's name and the quantity of the product sold during the
                          specified time period
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                              description: The name of the product
                            quantity_sold:
                              type: integer
                              description: The total price of all orders made for any of a user's product on that date
        '401':
          description: Unauthenticated Request. Invalid or absent jwt
          $ref: "#/components/errors/Error401"
        '400':
          description: 
            Invalid query parameter(s)
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    enum:
                      - Invalid GET parameters. Only period or a combination of start_date and end_date is allowed
                      - Invalid value for period parameter
                      - Invalid date format. Use YYYY-MM-DD

        '500':
          description: Unexpected server error
          $ref: "#/components/errors/Server500"
  
  /reports/summary:
    get:
      security:
        - bearerAuth: []
      tags:
        - User Business Report
      summary: Get User's business report data summary
      description: 
        Get general report data summary about the inventory and orders of a User's business over a period of time. Takes
        optional query parameters that specifies the time period. defaults to all time if the parameter isn't included
      parameters:
        - name: period
          in: query
          description: 
            The time period in which the business report data summary is to be generated from.
          schema:
            type: string
            example: last-week
            enum:
              - last-week
              - last-month
              - last-6-months
              - last-year
        - name: start_date
          in: query
          description: 
            The start date of the time period in which the business report data summary is to be generated from. If this
            parameter is present, 'end_date' parameter must also be present and 'period' parameter must be absent.
            It's a string representing a date in the format 'YYYY-MM-DD'.
          schema:
            type: string
            example: "2025-07-16"
        - name: end_date
          in: query
          description: 
            The end date of the time period in which the business report data summary is to be generated from. If this
            parameter is present, 'start_date' parameter must also be present and 'period' parameter must be absent.
            It's a string representing a date in the format 'YYYY-MM-DD'.
          schema:
            type: string
            example: "2025-07-26"
      responses:
        '200':
          description: User orders have been retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      period:
                        type: string
                        description: The time range in which the report data was filtered over
                        example: All time
                      summary:
                        type: array
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                              description:
                                The name of a specific product
                            revenue:
                              type: integer
                              description:
                                The revenue generated by a specific period over a period of time. It's is the total price 
                                of all the orders for a specific product in a user's inventory during a specified time period
                            quantity_sold:
                              type: integer
                              description:
                                The total amount of a user's product sold during a specified time period
                            stock_status:
                              type: string
                              description:
                                Describes the current level of the stock. "out of stock" means the item doesn't exist in the 
                                inventory any longer
                              enum:
                                - in stock
                                - low stock
                                - out of stock

        '401':
          description: Unauthenticated Request. Invalid or absent jwt
          $ref: "#/components/errors/Error401"
        '400':
          description: 
            Invalid query parameter(s)
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    enum:
                      - Invalid GET parameters. Only period or a combination of start_date and end_date is allowed
                      - Invalid value for period parameter
                      - Invalid date format. Use YYYY-MM-DD

        '500':
          description: Unexpected server error
          $ref: "#/components/errors/Server500"  
    
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  errors:
    Route404:
      content:
        application/json:
        schema:
          type: object
          properties:
            detail:
              type: string
              example: Resource not found
    Error401:
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "#/components/schemas/NoToken401"
              - $ref: "#/components/schemas/InvalidToken401"

    Server500:
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string
                example: Something went wrong while trying to process your request

  Password_field:
    password:
      type: string

  schemas:
    NoToken401:
      type: object
      properties:
        detail:
          type: string
          example: Authentication credentials were not provided.

    InvalidToken401:
      type: object
      properties:
        detail:
          type: string
          example: Given token not valid for any token type
        # there are still more properties but I don't want to document what I don't fully understand

    InventoryItem:
      type: object
      properties:
        owner:
          type: string
        product_name:
          type: string
        description:
          type: string
        category:
          type: string
        stock_level:
          type: integer
        low_stock_threshold:
          type: integer
        price:
          type: integer
        last_updated:
          type: string

    OrderedProduct:
      type: object
      properties:
        name:
          type: string
        order_id:
          type: integer
        quantity:
          type: integer
        price:
          type: integer
        cummulative_price:
          type: integer

    Order:
      type: object
      properties:
        id:
          type: integer
        client_name:
          type: string
        client_email:
          type: string
        client_phone:
          type: string
        status:
          type: string
        order_date:
          type: string
        delivery_date:
          type: string
        total_price:
          type: number
          format: float
        ordered_products:
          type: array
          items:
            $ref: "#components/schemas/OrderedProduct"

    User:
      type: object
      properties:
        business_name:
          type: string
        full_name:
          type: string
        email:
          type: string
        business_type:
          type: string
          enum:
            - Sole proprietorship
            - General partnership
            - Limited partnership
            - Limited liability partnership (LLP)
            - C corporation
            - S corporation
            - Benefit corporation
            - Limited liability company (LLC)
            - Nonprofit
            - Joint venture
        country:
          type: string
          description: Most countries are supported
        currency:
          type: string
          description: Most valid currency codes are supported
          example: NGN
        state:
          type: string
        rcv_mail_for_new_orders:
          type: boolean
        rcv_mail_for_low_stocks:
          type: boolean
        phone:
          type: string
        business_phone:
          type: string
        business_address:
          type: string
        rcv_mail_notification:
          type: boolean
        rcv_msg_notification:
          type: boolean
        default_order_status:
          type: string
        language:
          type: string
        low_stock_threshold:
          type: integer